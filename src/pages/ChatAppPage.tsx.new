import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { FiUsers, FiArrowLeft, FiRefreshCw } from 'react-icons/fi/index.js';
import { FaUserCircle } from 'react-icons/fa/index.js';
import useChat from '../hooks/useChat';
import ChatMessage from '../components/chat/ChatMessage';
import ChatInput from '../components/chat/ChatInput';
import { Message as MessageType, ChatUser } from '../types/chat';

const ChatAppPage: React.FC = () => {
  const navigate = useNavigate();
  const [username, setUsername] = useState<string>('');
  const [tempUsername, setTempUsername] = useState<string>('');
  const [isUsernameSet, setIsUsernameSet] = useState<boolean>(false);
  const [showUserList, setShowUserList] = useState<boolean>(false);
  const [showUsernameModal, setShowUsernameModal] = useState<boolean>(true);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const userListRef = useRef<HTMLDivElement>(null);
  const { roomId } = useParams<{ roomId?: string }>();

  // Initialize chat with empty username first, will be set after username is provided
  const { messages, users, isConnected, sendMessage } = useChat(isUsernameSet ? username : '');
  
  // Close user list when clicking outside
  const handleClickOutside = useCallback((event: MouseEvent) => {
    if (userListRef.current && !userListRef.current.contains(event.target as Node)) {
      setShowUserList(false);
    }
  }, []);
  
  // Handle click outside of user list
  useEffect(() => {
    if (showUserList) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showUserList, handleClickOutside]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleUsernameSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const trimmedUsername = tempUsername.trim();
    if (trimmedUsername) {
      setUsername(trimmedUsername);
      setIsUsernameSet(true);
      setShowUsernameModal(false);
    }
  };

  const handleSendMessage = useCallback((text: string) => {
    if (isConnected) {
      sendMessage(text);
    }
  }, [isConnected, sendMessage]);

  if (showUsernameModal) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 w-full max-w-md">
          <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-white">Enter Your Name</h2>
          <form onSubmit={handleUsernameSubmit}>
            <input
              type="text"
              value={tempUsername}
              onChange={(e) => setTempUsername(e.target.value)}
              placeholder="Your name"
              className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg mb-4 dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              autoFocus
              required
            />
            <button
              type="submit"
              className="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors"
            >
              Join Chat
            </button>
          </form>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow-sm z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <button
                onClick={() => navigate('/')}
                className="mr-4 p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"
                aria-label="Back to home"
              >
                <FiArrowLeft className="h-5 w-5 text-gray-600 dark:text-gray-300" />
              </button>
              <h1 className="text-xl font-semibold text-gray-900 dark:text-white">
                Real-Time Chat
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <div className="relative" ref={userListRef}>
                <button
                  onClick={() => setShowUserList(!showUserList)}
                  className="p-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white relative"
                  aria-label="Online users"
                  aria-expanded={showUserList}
                >
                  <FiUsers className="h-5 w-5" />
                  {users.length > 0 && (
                    <span className="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                      {users.length}
                    </span>
                  )}
                </button>
                
                {showUserList && (
                  <div className="absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-xl z-20 border border-gray-200 dark:border-gray-700 overflow-hidden">
                    <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center bg-gray-50 dark:bg-gray-800">
                      <h3 className="font-medium text-gray-700 dark:text-gray-200">
                        Online Users <span className="text-gray-500">({users.length})</span>
                      </h3>
                      <button 
                        onClick={(e) => {
                          e.stopPropagation();
                          // Add refresh functionality here if needed
                        }}
                        className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                        aria-label="Refresh user list"
                      >
                        <FiRefreshCw className="h-4 w-4" />
                      </button>
                    </div>
                    <div className="max-h-60 overflow-y-auto">
                      {users.length > 0 ? (
                        users.map((user) => (
                          <div
                            key={user.id}
                            className="px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700/50 flex items-center border-b border-gray-100 dark:border-gray-700 last:border-0"
                          >
                            <div className={`h-2.5 w-2.5 rounded-full mr-3 flex-shrink-0 ${
                              user.isOnline ? 'bg-green-500' : 'bg-gray-300 dark:bg-gray-600'
                            }`}></div>
                            <FaUserCircle className="mr-2 text-gray-400 flex-shrink-0" />
                            <span className="truncate">
                              {user.username}
                              {user.username === username && (
                                <span className="ml-1 text-xs text-blue-500">(You)</span>
                              )}
                            </span>
                          </div>
                        ))
                      ) : (
                        <div className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400 text-center">
                          No users online
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
              <div className="flex items-center">
                <div className={`h-3 w-3 rounded-full mr-2 ${
                  isConnected ? 'bg-green-500' : 'bg-red-500'
                }`}></div>
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  {isConnected ? 'Connected' : 'Disconnected'}
                </span>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Chat messages */}
      <div className="flex-1 overflow-y-auto p-4 pb-20">
        <div className="max-w-3xl mx-auto space-y-4">
          {messages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-64 text-gray-500 dark:text-gray-400">
              <div className="text-4xl mb-4">ðŸ’¬</div>
              <p className="text-lg">No messages yet</p>
              <p className="text-sm">Say hello to start the conversation!</p>
            </div>
          ) : (
            messages.map((message) => (
              <ChatMessage key={message.id} message={message} />
            ))
          )}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Chat input */}
      <div className="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
        <div className="max-w-3xl mx-auto">
          <ChatInput 
            onSendMessage={handleSendMessage} 
            isConnected={isConnected} 
          />
        </div>
      </div>
    </div>
  );
};

export default ChatAppPage;
